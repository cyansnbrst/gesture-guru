// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: gestures/gestures.proto

package gesturesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gestures_GetByID_FullMethodName = "/gestures.Gestures/GetByID"
	Gestures_GetAll_FullMethodName  = "/gestures.Gestures/GetAll"
	Gestures_Create_FullMethodName  = "/gestures.Gestures/Create"
	Gestures_Update_FullMethodName  = "/gestures.Gestures/Update"
	Gestures_Delete_FullMethodName  = "/gestures.Gestures/Delete"
)

// GesturesClient is the client API for Gestures service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Gestures is service for managing gestures database.
type GesturesClient interface {
	GetByID(ctx context.Context, in *GetGestureByIDRequest, opts ...grpc.CallOption) (*GetGestureByIDResponse, error)
	GetAll(ctx context.Context, in *GetAllGesturesRequest, opts ...grpc.CallOption) (*GetAllGesturesResponse, error)
	Create(ctx context.Context, in *CreateGestureRequest, opts ...grpc.CallOption) (*CreateGestureResponse, error)
	Update(ctx context.Context, in *UpdateGestureRequest, opts ...grpc.CallOption) (*UpdateGestureResponse, error)
	Delete(ctx context.Context, in *DeleteGestureRequest, opts ...grpc.CallOption) (*DeleteGestureResponse, error)
}

type gesturesClient struct {
	cc grpc.ClientConnInterface
}

func NewGesturesClient(cc grpc.ClientConnInterface) GesturesClient {
	return &gesturesClient{cc}
}

func (c *gesturesClient) GetByID(ctx context.Context, in *GetGestureByIDRequest, opts ...grpc.CallOption) (*GetGestureByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGestureByIDResponse)
	err := c.cc.Invoke(ctx, Gestures_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gesturesClient) GetAll(ctx context.Context, in *GetAllGesturesRequest, opts ...grpc.CallOption) (*GetAllGesturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllGesturesResponse)
	err := c.cc.Invoke(ctx, Gestures_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gesturesClient) Create(ctx context.Context, in *CreateGestureRequest, opts ...grpc.CallOption) (*CreateGestureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGestureResponse)
	err := c.cc.Invoke(ctx, Gestures_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gesturesClient) Update(ctx context.Context, in *UpdateGestureRequest, opts ...grpc.CallOption) (*UpdateGestureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGestureResponse)
	err := c.cc.Invoke(ctx, Gestures_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gesturesClient) Delete(ctx context.Context, in *DeleteGestureRequest, opts ...grpc.CallOption) (*DeleteGestureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGestureResponse)
	err := c.cc.Invoke(ctx, Gestures_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GesturesServer is the server API for Gestures service.
// All implementations must embed UnimplementedGesturesServer
// for forward compatibility.
//
// Gestures is service for managing gestures database.
type GesturesServer interface {
	GetByID(context.Context, *GetGestureByIDRequest) (*GetGestureByIDResponse, error)
	GetAll(context.Context, *GetAllGesturesRequest) (*GetAllGesturesResponse, error)
	Create(context.Context, *CreateGestureRequest) (*CreateGestureResponse, error)
	Update(context.Context, *UpdateGestureRequest) (*UpdateGestureResponse, error)
	Delete(context.Context, *DeleteGestureRequest) (*DeleteGestureResponse, error)
	mustEmbedUnimplementedGesturesServer()
}

// UnimplementedGesturesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGesturesServer struct{}

func (UnimplementedGesturesServer) GetByID(context.Context, *GetGestureByIDRequest) (*GetGestureByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedGesturesServer) GetAll(context.Context, *GetAllGesturesRequest) (*GetAllGesturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGesturesServer) Create(context.Context, *CreateGestureRequest) (*CreateGestureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGesturesServer) Update(context.Context, *UpdateGestureRequest) (*UpdateGestureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGesturesServer) Delete(context.Context, *DeleteGestureRequest) (*DeleteGestureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGesturesServer) mustEmbedUnimplementedGesturesServer() {}
func (UnimplementedGesturesServer) testEmbeddedByValue()                  {}

// UnsafeGesturesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GesturesServer will
// result in compilation errors.
type UnsafeGesturesServer interface {
	mustEmbedUnimplementedGesturesServer()
}

func RegisterGesturesServer(s grpc.ServiceRegistrar, srv GesturesServer) {
	// If the following call pancis, it indicates UnimplementedGesturesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gestures_ServiceDesc, srv)
}

func _Gestures_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGestureByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GesturesServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gestures_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GesturesServer).GetByID(ctx, req.(*GetGestureByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gestures_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGesturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GesturesServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gestures_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GesturesServer).GetAll(ctx, req.(*GetAllGesturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gestures_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGestureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GesturesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gestures_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GesturesServer).Create(ctx, req.(*CreateGestureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gestures_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGestureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GesturesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gestures_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GesturesServer).Update(ctx, req.(*UpdateGestureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gestures_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGestureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GesturesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gestures_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GesturesServer).Delete(ctx, req.(*DeleteGestureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gestures_ServiceDesc is the grpc.ServiceDesc for Gestures service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gestures_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gestures.Gestures",
	HandlerType: (*GesturesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _Gestures_GetByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Gestures_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Gestures_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Gestures_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Gestures_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gestures/gestures.proto",
}
